/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int countNodes(TreeNode root) {
        int leftHeight = getLeftHeight(root);   // Calc height of left nodes
        int rightHeight = getRightHeight(root);     // Calc height of right nodes
    
        
        if (leftHeight == rightHeight)  
            // Complete tree with 2 ^ h -1 nodes where h is height of the left/ right nodes
            return (1<<leftHeight) -1;
        else        
            // Call the recursive funciton to calc left/ right height seperately
            return 1 + countNodes(root.left) + countNodes(root.right);
        
    }
    public int getLeftHeight(TreeNode root) {
        int count = 0;
        while (root != null) {
            count++;
            root = root.left;
        }
        return count;
    }
    public int getRightHeight(TreeNode root) {
        int count = 0;
        while (root != null) {
            count++;
            root = root.right;
        }
        return count;
    }
}
