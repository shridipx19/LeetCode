class MinStack {
    Stack<Long> stk = new Stack<>();
    Long mini;
    public MinStack() {
        mini = Long.MAX_VALUE;
    }
    
    public void push(int value){
        long val = (long)value;
        if(stk.isEmpty()) { // Check if stack is empty
            mini = val;
            stk.push(val);  // Push operation
        } 
        else {
            if (val < mini) {
                stk.push(2 * val - mini);   // Push modified value
                mini = val; // Update minimum
            }
            else {
                stk.push(val);  // Push normal value
            }
        }
        
    }
    
    public void pop() {
        if (stk.isEmpty()) return;
        long val = stk.pop();   // Pop the top and get deleted element
        if (val < mini) {
            mini = 2 * mini - val;  // Rollback to previous minimum incase deleted minimum
        }
    }
    
    public int top() {
        long val = stk.peek();
        if (val < mini) {
            return mini.intValue();
        }
        return (int)(val);
    }
    
    public int getMin() {
        return mini.intValue();
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.push(val);
 * obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.getMin();
 */
